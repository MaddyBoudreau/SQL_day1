-- This is a comment

-- CRUD
-- Create, Read, Update, Delete

-- Creating Data
-- INSERT

-- Reading Data
-- SELECT

-- Updating Data
-- UPDATE

-- Deleting Data
-- DELETE

-- Get all columns from our actor table
SELECT * -- * means get ALL columns
FROM actor;

-- Get specific columns from our tables
SELECT title, description, release_year
FROM film;

-- Conditional queries. WHERE clause
SELECT *
FROM film
WHERE rental_rate < 4;

-- Conditional Queries w/ string type
SELECT *
FROM actor
WHERE first_name = 'Nick';

-- Conditional query w/ LIKE
SELECT *
FROM actor
WHERE first_name LIKE 'Nick';

-- "%" - Wildcard, this allows you to have any number of any character in the place that the % is
-- "_" - Placeholder, it allows any character but exactly ONE of that character

SELECT *
FROM actor
WHERE first_name LIKE 'N%k'; 

SELECT *
FROM actor
WHERE first_name LIKE '___k';

SELECT *
FROM actor
WHERE first_name LIKE '__ck';

SELECT *
FROM actor
WHERE first_name LIKE 'K___%n';

-- Comparing operators
-- "=" - Compares if things are equal
-- "<" - Compares if something is less than something else
-- "<=" - Less than or equal to
-- ">" - Compares if something is more than something else
-- ">=" - Greater than or equal to
-- "<>" - Compares if something is not equal to something else

SELECT *
FROM payment;

-- Get all payments less than 5.99
SELECT *
FROM payment
WHERE amount < 5.99;

-- Get all payments greater than 2.99
SELECT *
FROM payment
WHERE amount > 2.99;

-- Get all payments that are NOT 5.99
SELECT *
FROM payment
WHERE amount <> 5.99;

-- Compound where clause
SELECT *
FROM payment
WHERE amount = 5.99 OR amount = 7.99 OR amount = 1.99;

-- Get all payments where amount is 5.99 or 7.99 and the payment was handled by staff #2
SELECT *
FROM payment
WHERE (amount = 5.99 OR amount = 7.99) AND staff_id = 2;

-- Exercise #1
-- Get all rentals handled by staff #1, where the customer's id is greater than 400
SELECT *
FROM rental
WHERE customer_id > 400 AND staff_id = 1;

SELECT *
FROM payment
WHERE amount >= 2.99 AND amount <= 7.99;

-- Between keyword
-- Between is INCLUSIVE on lower and upper bounds
SELECT *
FROM payment
WHERE amount BETWEEN 2.99 AND 7.99;

-- ORDER

-- Order payments from smallest to largest
SELECT * 
FROM payment
ORDER BY amount ASC;

SELECT * 
FROM payment
ORDER BY amount;

-- Order payments from largest to smallest
SELECT * 
FROM payment
ORDER BY amount DESC;

-- Query for data that shows customers who paid
-- an amount NOT EQUAL to $0.00
-- Order the results in DESCENDING order
SELECT *
FROM payment
WHERE amount <> 0.00
ORDER BY amount DESC;

-- Aggregate Functions => SUM(), AVG(), COUNT(), MIN(), MAX()

-- Total payment amount
SELECT SUM(amount)
FROM payment;

-- Find the total payments handled by staff #1
SELECT SUM(amount)
FROM payment
WHERE staff_id = 1;

-- You are customer 13, find the total amount you've spent on rentals over 4.99
SELECT SUM(amount)
FROM payment
WHERE customer_id = 13 AND amount > 4.99;

SELECT SUM(amount)
FROM payment
WHERE (customer_id BETWEEN 10 AND 19) AND amount > 4.99;

-- Find the average payment
SELECT AVG(amount)
FROM payment;

-- Find the average payment not including FREE rentals
SELECT AVG(amount)
FROM payment
WHERE amount > 0;

-- Find the minimum payment
SELECT MIN(amount)
FROM payment;

-- Find the maximum payment
SELECT MAX(amount)
FROM payment;

-- Find how many records are in the payment table
SELECT COUNT(*)
FROM payment;

-- Select the amount of 5.99 payments
SELECT COUNT(*)
FROM payment
WHERE amount = 5.99;

-- Column Alias
SELECT SUM(amount) AS TOTAL_SUM
FROM payment;

SELECT *
FROM actor
ORDER BY first_name;

-- Get all unique first names of actors
SELECT DISTINCT first_name 
FROM actor
ORDER BY first_name;

-- How many unique first names of actors are there?
SELECT COUNT(DISTINCT first_name)
FROM actor;

-- GROUP BY clause
-- Is used with aggregate functions 

-- Find the total payments handled by each staff member
SELECT staff_id, SUM(amount)
FROM payment
GROUP BY staff_id;

-- Find the amount of rentals rented at each payment rate
SELECT amount, COUNT(amount)
FROM payment
GROUP BY amount;

-- What is the most common payment rental?
SELECT amount, COUNT(amount)
FROM payment
GROUP BY amount
ORDER BY count DESC;

SELECT amount, COUNT(amount) AS rental_count
FROM payment
GROUP BY amount
ORDER BY rental_count DESC;

-- JUST FIND THE TOP ONE
SELECT amount, COUNT(amount) AS rental_count
FROM payment
GROUP BY amount
ORDER BY rental_count DESC
LIMIT 1;

-- HAVING clause
-- Is the same idea as the where clause, but it's for aggregates

-- Find the most common payment, below 4.99
SELECT amount, COUNT(amount) AS rental_count
FROM payment
GROUP BY amount
HAVING COUNT(amount) > 1000
ORDER BY rental_count DESC;

SELECT staff_id, SUM(amount)
FROM payment
GROUP BY staff_id
HAVING SUM(amount) > 31000;

----------------------HOMEWORK START-------------------------

--Question 1 How many actors are there with the last name ‘Wahlberg’?
-- Answer : 2
SELECT * 
FROM actor
WHERE last_name = 'Wahlberg';

-- Question 2 How many payments were made between $3.99 and $5.99?
-- Answer : 5607
SELECT count(payment) 
FROM payment 
WHERE amount BETWEEN 3.99 and 5.99;

-- Question 3 What film does the store have the most of? (search in inventory)
--Answer: 72 films have a count of 8
SELECT film_id, COUNT(inventory)
FROM inventory
GROUP BY film_id
ORDER BY count DESC;

--Question 4 How many customers have the last name ‘William’?
-- Answer: 0 
SELECT last_name
FROM customer
WHERE last_name = 'William';

-- Question 5 What store employee (get the id) sold the most rentals?
-- Answer: Employee #1
SELECT staff_id, COUNT(rental)
FROM rental
GROUP BY staff_id
ORDER BY count DESC;

-- Question 6 How many different district names are there?
-- Answer: 378 districts
SELECT district, COUNT(district)
FROM address
GROUP BY district
ORDER BY count DESC;

-- Question 7 What film has the most actors in it? (use film_actor table and get film_id)
-- Answer: Film 508
SELECT film_id, COUNT(actor_id)
FROM film_actor
GROUP BY film_id
ORDER BY count DESC
LIMIT 1;

--Question 8 From store_id 1, how many customers have a last name ending with ‘es’? (use customer table)
-- Answer: 13 customers
SELECT count(last_name)
FROM customer
WHERE last_name LIKE '%es' and store_id = 1;

-- QUESTION 9 How many payment amounts (4.99, 5.99, etc.) had a number of
--rentals above 250 for customers with ids between 380 and 430? 
--(use group by and having > 250)
-- Answer: 3
SELECT amount, COUNT(amount)
FROM payment
WHERE customer_id BETWEEN 380 and 430
GROUP BY amount
HAVING COUNT(amount) > 250

-- Question 10 Within the film table, how many rating categories are there? 
--And what rating has the most movies total?
-- Answer: PG - 13 , 223 
SELECT rating, count(rating)
FROM film
GROUP BY rating
ORDER BY count(rating) DESC
LIMIT 1;

